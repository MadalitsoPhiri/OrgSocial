// Generated by view binder compiler. Do not edit!
package com.example.orgsocial.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.orgsocial.R;
import com.mikhaellopez.circularimageview.CircularImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CallListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView callActionIcon;

  @NonNull
  public final ImageView callButton;

  @NonNull
  public final TextView callDateTime;

  @NonNull
  public final TextView chatName;

  @NonNull
  public final CircularImageView chatProfile;

  private CallListItemBinding(@NonNull LinearLayout rootView, @NonNull ImageView callActionIcon,
      @NonNull ImageView callButton, @NonNull TextView callDateTime, @NonNull TextView chatName,
      @NonNull CircularImageView chatProfile) {
    this.rootView = rootView;
    this.callActionIcon = callActionIcon;
    this.callButton = callButton;
    this.callDateTime = callDateTime;
    this.chatName = chatName;
    this.chatProfile = chatProfile;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CallListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CallListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.call_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CallListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.call_action_icon;
      ImageView callActionIcon = rootView.findViewById(id);
      if (callActionIcon == null) {
        break missingId;
      }

      id = R.id.call_button;
      ImageView callButton = rootView.findViewById(id);
      if (callButton == null) {
        break missingId;
      }

      id = R.id.call_date_time;
      TextView callDateTime = rootView.findViewById(id);
      if (callDateTime == null) {
        break missingId;
      }

      id = R.id.chat_name;
      TextView chatName = rootView.findViewById(id);
      if (chatName == null) {
        break missingId;
      }

      id = R.id.chat_profile;
      CircularImageView chatProfile = rootView.findViewById(id);
      if (chatProfile == null) {
        break missingId;
      }

      return new CallListItemBinding((LinearLayout) rootView, callActionIcon, callButton,
          callDateTime, chatName, chatProfile);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
